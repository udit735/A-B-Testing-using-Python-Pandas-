# importing pandas module of Python
import pandas as pd

# Reading the CSV file assuming that it has been stored in the directory where Python is installed
ad_clicks = pd.read_csv('ad_clicks.csv')

# Using the head() method to display the first 5 entries excluding column names
print(ad_clicks.head(5))

# Displaying the unique utm sources, will output: ['google' 'facebook' 'twitter' 'email']
print(ad_clicks.utm_source.unique())

# Grouping the dataset by utm source and deriving the count of each utm aource.The reset index method will reset the order of the dataframe
views_by_utm_source = ad_clicks.groupby('utm_source').user_id.count().reset_index()
print(views_by_utm_source)
# Output: 
utm_source	user_id
0	email	    255
1	facebook	504
2	google	  680
3	twitter	  215

# Creates a new column 'is_click' which is 'True' if 'ad_click_timestamp' is not null and 'False' otherwise 
ad_clicks['is_click'] = ~ad_clicks.ad_click_timestamp.isnull()
print(ad_clicks.head(5))
# Output:
user_id	utm_source	day	ad_click_timestamp	experimental_group	is_click
0	008b7c6c-7272-471e-b90e-930d548bd8d7	google	6 - Saturday	7:18	A	True
1	009abb94-5e14-4b6c-bb1c-4f4df7aa7557	facebook	7 - Sunday	nan	B	False
2	00f5d532-ed58-4570-b6d2-768df5f41aed	twitter	2 - Tuesday	nan	A	False
3	011adc64-0f44-4fd9-a0bb-f1506d2ad439	google	2 - Tuesday	nan	B	False
4	012137e6-7ae7-4649-af68-205b4702169c	facebook	7 - Sunday	nan	B	False

# Groups the dataframeby 'utm_source' and 'is_click' and displaying the count of user_id and resetting indexes to create a new dataframe
clicks_by_source = ad_clicks.groupby(['utm_source', 'is_click']).user_id.count().reset_index()
print(clicks_by_source)
# Output:
utm_source  is_click  user_id
0      email     False      175
1      email      True       80
2   facebook     False      324
3   facebook      True      180
4     google     False      441
5     google      True      239
6    twitter     False      149
7    twitter      True       66

# Creating a pivot to increase comprehension 
clicks_pivot = clicks_by_source.pivot(columns = 'is_click', index = 'utm_source', values = 'user_id').reset_index()
print(clicks_pivot)
# Output:
is_click utm_source  False  True
0             email    175    80
1          facebook    324   180
2            google    441   239
3           twitter    149    66

# Creating a new column 'percent_clicked' to indicate % of users who clicked on ads 
clicks_pivot['percent_clicked'] = clicks_pivot[True]/(clicks_pivot[True] + clicks_pivot[False])*100
print(clicks_pivot)
is_click utm_source  False  True  percent_clicked
0             email    175    80        31.372549
1          facebook    324   180        35.714286
2            google    441   239        35.147059
3           twitter    149    66        30.697674

# Grouping the dataframe by 'experimental_group' and calculating count of user_id
a_b_testing = ad_clicks.groupby('experimental_group').user_id.count().reset_index()
print(a_b_testing)
# Output:
experimental_group  user_id
0                  A      827
1                  B      827

# Grouping the dataframe by 'experimental_group' and 'is_click' and calculating count of user_id
a_b_testing_click_percent = ad_clicks.groupby(['experimental_group', 'is_click']).user_id.count().reset_index()
print(a_b_testing_click_percent)
# Output:
experimental_group  is_click  user_id
0                  A     False      517
1                  A      True      310
2                  B     False      572
3                  B      True      255

# Pivot for a better view and comprehension
pivot_a_b_testing_click_percent = a_b_testing_click_percent.pivot(columns = 'is_click', values= 'user_id', index = 'experimental_group').reset_index()
print(pivot_a_b_testing_click_percent)
# Output:
is_click experimental_group  False  True
0                         A    517   310
1                         B    572   255

# Creating a new column to calculated click percentage
pivot_a_b_testing_click_percent['percent_clicked_a_b'] = pivot_a_b_testing_click_percent[True]/(pivot_a_b_testing_click_percent[True] + pivot_a_b_testing_click_percent[False])*100
print(pivot_a_b_testing_click_percent)
# Output:
experimental_group	False	True	percent_clicked_a_b
0	A	                  517	310	37.484885127
1	B	                  572	255	30.8343409915

# Creating separate dataframes for groups A and B
a_clicks = ad_clicks[ad_clicks.experimental_group == 'A']
print(a_clicks)
b_clicks = ad_clicks[ad_clicks.experimental_group == 'B']
print(b_clicks)
# Output:
ndex	user_id	utm_source	day	ad_click_timestamp	experimental_group	is_click
0	0	008b7c6c-7272-471e-b90e-930d548bd8d7	google	6 - Saturday	7:18	A	True
1	2	00f5d532-ed58-4570-b6d2-768df5f41aed	twitter	2 - Tuesday	nan	A	False
2	5	013b0072-7b72-40e7-b698-98b4d0c9967f	facebook	1 - Monday	nan	A	False
3	6	0153d85b-7660-4c39-92eb-1e1acd023280	google	4 - Thursday	nan	A	False
4	7	01555297-d6e6-49ae-aeba-1b196fdbb09f	google	3 - Wednesday	nan	A	False

index	user_id	utm_source	day	ad_click_timestamp	experimental_group	is_click
0	1	009abb94-5e14-4b6c-bb1c-4f4df7aa7557	facebook	7 - Sunday	nan	B	False
1	3	011adc64-0f44-4fd9-a0bb-f1506d2ad439	google	2 - Tuesday	nan	B	False
2	4	012137e6-7ae7-4649-af68-205b4702169c	facebook	7 - Sunday	nan	B	False
3	9	01a210c3-fde0-4e6f-8efd-4f0e38730ae6	email	2 - Tuesday	15:21	B	True
4	10	01adb2e7-f711-4ae4-a7c6-29f48457eea1	google	3 - Wednesday	nan	B	False

# Grouping A group by 'day', 'experimental_group', 'is_click' and calculating count of user_id
a_clicks_by_day = a_clicks.groupby(['day', 'experimental_group', 'is_click']).user_id.count().reset_index()
print(a_clicks_by_day)
# Output:
day	experimental_group	is_click	user_id
0	1 - Monday	A	False	70
1	1 - Monday	A	True	43
2	2 - Tuesday	A	False	76
3	2 - Tuesday	A	True	43
4	3 - Wednesday	A	False	86
5	3 - Wednesday	A	True	38
6	4 - Thursday	A	False	69
7	4 - Thursday	A	True	47
8	5 - Friday	A	False	77
9	5 - Friday	A	True	51
10	6 - Saturday	A	False	73
11	6 - Saturday	A	True	45
12	7 - Sunday	A	False	66
13	7 - Sunday	A	True	43

# Creating pivot for A group and creating a new column for calculation of percent clicked on ads
pivot_a_clicks_by_day = a_clicks_by_day.pivot(columns = 'is_click', index = 'day', values = 'user_id').reset_index()
pivot_a_clicks_by_day['percent_clicked'] = pivot_a_clicks_by_day[True]/(pivot_a_clicks_by_day[True]+pivot_a_clicks_by_day[False])*100
print(pivot_a_clicks_by_day)
# Output:
day	False	True	percent_clicked
0	1 - Monday	70	43	38.0530973451
1	2 - Tuesday	76	43	36.1344537815
2	3 - Wednesday	86	38	30.6451612903
3	4 - Thursday	69	47	40.5172413793
4	5 - Friday	77	51	39.84375
5	6 - Saturday	73	45	38.1355932203
6	7 - Sunday	66	43	39.4495412844

# Similar procedure for B group
b_clicks_by_day = b_clicks.groupby(['day', 'experimental_group', 'is_click']).user_id.count().reset_index()
print(b_clicks_by_day)
# Output:
day	experimental_group	is_click	user_id
0	1 - Monday	B	False	81
1	1 - Monday	B	True	32
2	2 - Tuesday	B	False	74
3	2 - Tuesday	B	True	45
4	3 - Wednesday	B	False	89
5	3 - Wednesday	B	True	35
6	4 - Thursday	B	False	87
7	4 - Thursday	B	True	29
8	5 - Friday	B	False	90
9	5 - Friday	B	True	38
10	6 - Saturday	B	False	76
11	6 - Saturday	B	True	42
12	7 - Sunday	B	False	75
13	7 - Sunday	B	True	34

pivot_b_clicks_by_day = b_clicks_by_day.pivot(columns = 'is_click', index = 'day', values = 'user_id').reset_index()
pivot_b_clicks_by_day['percent_clicked'] = pivot_b_clicks_by_day[True]/(pivot_b_clicks_by_day[True]+pivot_b_clicks_by_day[False])*100
print(pivot_b_clicks_by_day)
# Output: 
day	False	True	percent_clicked
0	1 - Monday	81	32	28.3185840708
1	2 - Tuesday	74	45	37.8151260504
2	3 - Wednesday	89	35	28.2258064516
3	4 - Thursday	87	29	25.0
4	5 - Friday	90	38	29.6875
5	6 - Saturday	76	42	35.593220339
6	7 - Sunday	75	34	31.1926605505

# Findings: Except for Tuesdays, Group A fared better than group B at click percentage.
